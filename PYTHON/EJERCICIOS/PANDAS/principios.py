import pandas as pd
import numpy as np
# PARA MOSTRAR GRAFICOS
import matplotlib.pyplot as plt

# ARRAY UNIDIMENSIONAL
serie = pd.Series([1,2,3])
# MOSTRARÍA EL INDICE JUNTO A LOS VALORES Y EL TIPO DE DATO
print(serie)
# A LA SERIE PODREMOS AÑADIRLE COSAS, COMO POR EJEMPLO UN NOMBRE
serie.name = "Nombre de la serie"
# AHORA AL IMPRIMIRLO, A PARTE DE VER EL TIPO DE DATO, SALDRÁ EL NOMBRE DE LA SERIE
print(serie)

# DATAFRAME QUE ES UN BIDI, SE LE AÑADEN LOS DATOS EN FORMA DE DICCIONARIO, SIENDO CADA UNO UNA COLUMNA, CADA COLUMNA REPRESENTARIA UNA SERIE
df = pd.DataFrame({'Coches':['BMW','Mercedes','Kia'], 'Motor':[1234,123,1234], 'Col3':serie})
print(df)
# PARA LEER UN ARCHIVO .csv USAREMOS LO SIGUIENTE, LE PODREMOS PASAR MUCHOS PARAMETROS, ENTRE ELLOS header PARA SABER SI TIENE CABECERA O NO SIENDO header = None SI NO TUVIESE
df = pd.read_csv("C:\\Users\\perma\\Desktop\\PWC\\PYTHON\\EJERCICIOS\\PROPUESTOS\\Ej3\\archivo2.csv", header= None)
print(df)
# YA QUE NO TIENE UN HEADER, SE LO PONDREMOS
header = ["Name","Age","Website","Location"]
# SE LO AÑADIREMOS
df.columns = header
print(df.head())


# MÉTODOS
# PARA VER LOS INDICES USAREMOS .index
print(df.index)
# PARA VER LAS CABECERAS DE LAS COLUMNAS
print(df.columns)
# PARA VER UNA SERIE DE ESTADISTICAS BASICAS DE CADA COLUMNA USAREMOS .describe()
print(df.describe())
# PARA VER EL TAMAÑO DEL DATAFRAME, CON FORMATO DE FILA/COLUMNA
print(df.shape)
# SI QUEREMOS VER UNA CANTIDAD CONCRETA DE FILAS DE UN DATAFRAME, USAREMOS head() POR DEFECTO DEVOLERÁ LAS 5 PRIMERAS
print(df.head())
# TAMBIÉN LE PODREMOS PASAR EL NÚMERO CONCRETO DE FILAS QUE QUEREMOS
print(df.head(3))
# PARA VER LOS ÚLTIMOS 5, USAREMOS tail() O PONDREMOS EL NÚMERO QUE QUERAMOS
print(df.tail(1))
# PARA CONTAR LOS VALORES USAREMOS .value_counts()
print(df['Age'].value_counts())
# SI QUEREMOS DARLE LA VUELTA, ES DECIR QUE LAS FILAS PASEN A SER COLUMNAS Y LAS COLUMNAS PASEN A SER FILAS, USAREMOS .T
print(df.T)
# PARA ORDENAR LA TABLA SEGUN LOS VALORES QUE TENGA UNA COLUMNA, EN ESTE CASO ORDENAMOS ASCENDENTE POR EDAD
print(df.sort_values("Age"))
# LO MISMO PERO DE MANERA DESCENDENTE
print(df.sort_values("Age", ascending = False))
# SI QUEREMOS COGER UNAS COLUMNAS DETERMINADAS
print(df[["Age","Location"]])
# SI QUEREMOS COGER FILAS DETERMINADAS, USAREMOS [:] Y YA PONDREMOS EL RANGO QUE QUERAMOS
print(df[1:]) 
# SI QUEREMOS FILA Y COLUMNA CONCRETA, USAREMOS, SIENDO [INDICE][COLUMNA]
print(df.iloc[[1,2],[1,3]])
# SI QUEREMOS FILTRAR COMO SI FUESE UNA CLAUSULA WHERE, SERÍA, EN ESTE CASO DONDE EDAD ESTÉ ENTRE 32 Y 35
print(df[(df["Age"]>32)&(df["Age"]<35)])
# TAMBIEN PODREMOS HACER OPERACIONES ENTRE COLUMNAS
print(df["COLUMNA QUE QUERAMOS"] - df["LA OTRA COLUMNA"])
# PARA SABER SI TENEMOS DATOS PERDIDOS (MISSING, TIPO nan), SI NOS DA 0 ES QUE NO TENEMOS NINGUN DATO PERDIDO
print(df.isna().sum())
# PARA QUITAR FILAS CON DATOS VACIOS, USAREMOS
print(df.dropna())
# PARA QUITAR DUPLICADOS
print(df.drop_duplicates())
# PARA ASEGURARNOS DE QUE LOS CAMBIOS SE HACEN EN EL DATAFRAME Y QUE NO DEVUELVA UNO NUEVO
df.dropna(inplace = True)
# PARA AGRUPAR LAS COLUMNAS (GROUP BY) USAREMOS, EN ESTE CASO AGRUPAREMOS POR LOCALIZACION Y LE HAREMOS LA MEDIA DE LA EDAD POR GRUPOS
df_group = df.groupby("Location")["Age"].mean()
# PARA AÑADIR UN DF A OTRO, USARMEOS .join A LO QUE LE PODREMOS PASAR MUCHOS PARAMETROS 
df_join = df.join(df_group, on=["Location"])
print(df_join)


# CASO PRACTICO CON NUMPY
# PARA MODIFICAR LOS DATOS MEDIANTE NUMPY
df["Age"][1] = np.nan
# AHORA SALDRÁ 1 VALOR nan EN AGE
print(df.isna().sum())
# ASÍ VEREMOS EL NaN
print(df.head())
# PARA PONERLE VALORES RELLENAREMOS TODOS LOS NaN CON fillna() PASANDOLE EL VALOR QUE QUERAMOS POR PARAMETRO, SI NO LO PASAMOS DE NUEVO A LA COLUMNA, NO SE GUARDARAN LOS CAMBIOS
df["Age"] = df["Age"].fillna("2.0")
print(df.head())
# PARA OBTENER LA MEDIA, USAREMOS, EN ESTE CASO LA MEDIA DE LAS EDADES
print(df["Age"].mean())
# PARA OBTENER LA MEDIANA, USAREMOS, EN ESTE CASO LA MEDIA DE LAS EDADES
print(df["Age"].median())
# PARA MOSTRAR GRAFICOS
df["Age"].plot(kind="hist")
plt.show()